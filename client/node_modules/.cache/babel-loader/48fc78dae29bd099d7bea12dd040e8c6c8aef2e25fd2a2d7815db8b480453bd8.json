{"ast":null,"code":"import axios from 'axios';\nimport { API_ENDPOINTS } from '../config';\nconst api = axios.create({\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  signup: async userData => {\n    const response = await api.post(API_ENDPOINTS.SIGNUP, userData);\n    return response.data;\n  },\n  login: async credentials => {\n    const response = await api.post(API_ENDPOINTS.LOGIN, credentials);\n    return response.data;\n  }\n};\nexport const messageService = {\n  getMessages: async (senderId, receiverId) => {\n    const response = await api.get(`${API_ENDPOINTS.MESSAGES}/${senderId}/${receiverId}`);\n    return response.data;\n  },\n  sendMessage: async messageData => {\n    const response = await api.post(API_ENDPOINTS.SEND_MESSAGE, messageData);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_ENDPOINTS","api","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authService","signup","userData","response","post","SIGNUP","data","login","credentials","LOGIN","messageService","getMessages","senderId","receiverId","get","MESSAGES","sendMessage","messageData","SEND_MESSAGE"],"sources":["C:/Users/adora/Desktop/local server - Copy/client/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_ENDPOINTS } from '../config';\r\n\r\nconst api = axios.create({\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authService = {\r\n  signup: async (userData) => {\r\n    const response = await api.post(API_ENDPOINTS.SIGNUP, userData);\r\n    return response.data;\r\n  },\r\n  \r\n  login: async (credentials) => {\r\n    const response = await api.post(API_ENDPOINTS.LOGIN, credentials);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const messageService = {\r\n  getMessages: async (senderId, receiverId) => {\r\n    const response = await api.get(`${API_ENDPOINTS.MESSAGES}/${senderId}/${receiverId}`);\r\n    return response.data;\r\n  },\r\n  \r\n  sendMessage: async (messageData) => {\r\n    const response = await api.post(API_ENDPOINTS.SEND_MESSAGE, messageData);\r\n    return response.data;\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,WAAW;AAEzC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,WAAW,GAAG;EACzBC,MAAM,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAChB,aAAa,CAACiB,MAAM,EAAEH,QAAQ,CAAC;IAC/D,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAML,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAChB,aAAa,CAACqB,KAAK,EAAED,WAAW,CAAC;IACjE,OAAOL,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG;EAC5BC,WAAW,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,KAAK;IAC3C,MAAMV,QAAQ,GAAG,MAAMd,GAAG,CAACyB,GAAG,CAAC,GAAG1B,aAAa,CAAC2B,QAAQ,IAAIH,QAAQ,IAAIC,UAAU,EAAE,CAAC;IACrF,OAAOV,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDU,WAAW,EAAE,MAAOC,WAAW,IAAK;IAClC,MAAMd,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAChB,aAAa,CAAC8B,YAAY,EAAED,WAAW,CAAC;IACxE,OAAOd,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}